import gmpy2
from gmpy2 import mpz, isqrt, invert, powmod
n = mpz('179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581')
r = isqrt(n)
a = r if pow(r, 2) == n else r+1
x = isqrt(pow(a, 2) - n)

p = a - x                   #from challenge_1
q = a + x                   #from challenge_1
print("P: \n{}".format(p))
print("Q: \n{}".format(q))

e = mpz('65537')
cipher = mpz('22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540')

phi_n = n - p - q + 1

d = invert(e, phi_n)

padded = powmod(cipher, d, n)
padded = str(padded)
padded_hex = mpz(padded, base = 10).digits(16)
if len(padded_hex) % 2 == 1:
    padded_hex = '0' + padded_hex

string_int_hex = padded_hex[padded_hex.index('00') + 2::]
plain = bytearray.fromhex(string_int_hex).decode('ascii')
print("Plaintext: \n" + plain)

